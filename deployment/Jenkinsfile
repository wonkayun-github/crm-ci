def label = "sumapp-${UUID.randomUUID().toString()}"

podTemplate(label: label,
	containers: [
	  containerTemplate(name: 'maven', image: 'maven:3.3.9-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
	  containerTemplate(name: 'docker', image: 'docker:stable', ttyEnabled: true, command: 'cat'),
	  containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:latest', command: 'cat', ttyEnabled: true)
	],
	volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')]
	) {

	node(label) {
 	  stage('Get Source') {
 		git branch: 'master', credentialsId: '', url: 'http://169.56.115.157:30013/wonkeun/crm-ci.git'
 	  }

	  def props = readProperties  file:'deployment/pipeline.properties'
	  def tag = props['version']
	  def gitSrc = props['gitSrc']
	  def dockerRegistry = props['dockerRegistry']
	  def image = props['image']
	  def deployment = props['deployment']
	  def service = props['service']
	  def selector = props['selector']
	  def namespace = props['namespace']
	  def prefix = props['prefix']
	  def dockerHub = props['dockerHub']

	  stage('Build Maven project') {
		container('maven') {
			sh "mvn -B clean package"
		}
	  }
	  /*
	  stage('Inspection Code') {
		container('maven') {
			sh "mvn sonar:sonar \
				  -Dsonar.host.url= \
				  -Dsonar.login="
		}
	  }
	  */
	  stage('Build Docker image') {
	   container('docker') {
		  docker.withRegistry("", "${dockerHub}") {
    		sh "docker build . -t ${image}:${tag}"
    		sh "docker push ${image}:${tag}"
		  }
	    }
	  }
      /*
	  stage('Image Vulnerability Scanning') {
		 container('docker'){
		  aquaMicroscanner imageName: 'docker.io/${image}:${tag}', notCompliesCmd: '', onDisallowed: 'ignore', outputFormat: 'html'
		  }
	  }
      */
	  stage( 'Clean Up Existing Deployments' ) {
		container('kubectl') {
		  withCredentials([[$class: 'UsernamePasswordMultiBinding',
							  credentialsId: "${dockerHub}",
							  usernameVariable: 'DOCKER_HUB_USER',
							  passwordVariable: 'DOCKER_HUB_PASSWORD']]) {

			  sh "kubectl delete deployments -n ${namespace} --selector=app=${selector}"
		  }
		}
	  }
      /*
	  stage( "Approver" ){
	    input "배포를 승인하시겠습니까?"
	  }
      */
	  stage( 'Deploy to Cluster' ) {
		container('kubectl') {
		  withCredentials([[$class: 'UsernamePasswordMultiBinding',
							  credentialsId: "${dockerHub}",
							  usernameVariable: 'DOCKER_HUB_USER',
							  passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
			  sh "kubectl apply -n ${namespace} -f ${deployment}"
			  sh "sleep 5"
			  sh "kubectl get pods -n ${namespace}"
			  sh "kubectl apply -n ${namespace} -f ${service}"
			  sh "kubectl get service -n ${namespace}"
		  }
		}
	  }
    }
}
